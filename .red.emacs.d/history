;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(evil-ex-history buffer-name-history file-name-history read-expression-history ido-file-history))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1))))
(setq buffer-name-history '("train.cpp" "trainTest.cpp"))
(setq file-name-history '("/home/c/Programs/sjjg4ywm/final_lab/r19/train.hpp" "/home/c/Programs/sjjg4ywm/final_lab/r19/user.cpp" "/home/c/Programs/sjjg4ywm/final_lab/r19/train.h" "/home/c/Programs/sjjg4ywm/final_lab/r19/user.hpp" "/home/c/Programs/sjjg4ywm/final_lab/r19/mylist.hpp" "/home/c/IdeaProjects/school/lab/final_lab/cal.java" "/home/c/Programs/sjjg4ywm/final_lab/r19/mylist.cpp" "/home/c/Programs/sjjg4ywm/final_lab/r19/train.cpp" "/home/c/Programs/sjjg4ywm/final_lab/19/user.cpp" "~/Programs/sjjg4ywm/final_lab/19/user.hpp" "/home/c/Programs/sjjg4ywm/final_lab/19/train.h" "/home/c/Programs/sjjg4ywm/final_lab/19/trainmanage.cpp" "/home/c/Programs/sjjg4ywm/final_lab/19/trainTest.cpp" "~/Programs/sjjg4ywm/final_lab/19/trainmanage.cpp" "~/Programs/sjjg4ywm/final_lab/19/train.cpp" "~/.emacs.d/custom-set-variables.el"))
(setq read-expression-history '("w"))
(setq ido-file-history '("train.hpp" "user.cpp" "train.h" "user.hpp" "mylist.hpp" "cal.java" "mylist.cpp" "train.cpp" nil "trainmanage.cpp" "trainTest.cpp"))
(setq evil-jumps-history '((6558 "/home/c/Programs/sjjg4ywm/final_lab/r19/main.cpp") (6371 "/home/c/Programs/sjjg4ywm/final_lab/r19/main.cpp") (1954 "/home/c/Programs/sjjg4ywm/final_lab/r19/train.hpp") (4187 "/home/c/Programs/sjjg4ywm/final_lab/r19/train.cpp") (3208 "/home/c/Programs/sjjg4ywm/final_lab/r19/mylist.hpp") (2548 "/home/c/Programs/sjjg4ywm/final_lab/r19/mylist.hpp") (1 "/home/c/Programs/sjjg4ywm/final_lab/r19/mylist.hpp") (57 "/home/c/Programs/sjjg4ywm/final_lab/19/train.h") (1 "/home/c/Programs/sjjg4ywm/final_lab/19/train.h") (1 "/home/c/Programs/sjjg4ywm/final_lab/19/train.h") (2775 "/home/c/Programs/sjjg4ywm/final_lab/19/trainTest.cpp") (992 "/home/c/Programs/sjjg4ywm/final_lab/19/trainTest.cpp") (108 "/home/c/Programs/sjjg4ywm/final_lab/19/trainTest.cpp") (1 "/home/c/Programs/sjjg4ywm/final_lab/19/user.cpp") (1277 "/home/c/Programs/sjjg4ywm/final_lab/19/trainmanage.cpp") (166 "/home/c/Programs/sjjg4ywm/final_lab/19/trainmanage.cpp") (1597 "/home/c/Programs/sjjg4ywm/final_lab/19/train.cpp") (3000 "/home/c/Programs/sjjg4ywm/final_lab/19/train.cpp")))
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
(setq kill-ring '(#("        
" 0 8 (fontified t yank-handler (evil-yank-line-handler)) 8 9 (fontified t yank-handler (evil-yank-line-handler))) #("        myuser.get_user_info();
" 0 8 (fontified t yank-handler (evil-yank-line-handler)) 8 9 (fontified t yank-handler (evil-yank-line-handler)) 9 10 (fontified t yank-handler (evil-yank-line-handler)) 10 11 (fontified t yank-handler (evil-yank-line-handler)) 11 12 (fontified t yank-handler (evil-yank-line-handler)) 12 13 (fontified t yank-handler (evil-yank-line-handler)) 13 14 (fontified t yank-handler (evil-yank-line-handler)) 14 15 (fontified t yank-handler (evil-yank-line-handler)) 15 28 (fontified t yank-handler (evil-yank-line-handler)) 28 29 (fontified t yank-handler (evil-yank-line-handler)) 29 30 (fontified t yank-handler (evil-yank-line-handler)) 30 31 (fontified t yank-handler (evil-yank-line-handler)) 31 32 (fontified t yank-handler (evil-yank-line-handler))) #("            result = &cursor;
" 0 12 (fontified t yank-handler (evil-yank-line-handler)) 12 13 (fontified t yank-handler (evil-yank-line-handler)) 13 14 (fontified t yank-handler (evil-yank-line-handler)) 14 15 (fontified t yank-handler (evil-yank-line-handler)) 15 16 (fontified t yank-handler (evil-yank-line-handler)) 16 17 (fontified t yank-handler (evil-yank-line-handler)) 17 18 (fontified t yank-handler (evil-yank-line-handler)) 18 19 (fontified t yank-handler (evil-yank-line-handler)) 19 20 (fontified t yank-handler (evil-yank-line-handler)) 20 21 (fontified t yank-handler (evil-yank-line-handler)) 21 22 (fontified t yank-handler (evil-yank-line-handler)) 22 23 (fontified t yank-handler (evil-yank-line-handler)) 23 24 (fontified t yank-handler (evil-yank-line-handler)) 24 25 (fontified t yank-handler (evil-yank-line-handler)) 25 26 (fontified t yank-handler (evil-yank-line-handler)) 26 27 (fontified t yank-handler (evil-yank-line-handler)) 27 28 (fontified t yank-handler (evil-yank-line-handler)) 28 29 (fontified t yank-handler (evil-yank-line-handler)) 29 30 (fontified t yank-handler (evil-yank-line-handler))) #("    if ()
" 0 4 (fontified t yank-handler (evil-yank-line-handler)) 4 5 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 5 6 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 6 7 (fontified t yank-handler (evil-yank-line-handler)) 7 8 (fontified t yank-handler (evil-yank-line-handler)) 8 9 (fontified t yank-handler (evil-yank-line-handler)) 9 10 (fontified t yank-handler (evil-yank-line-handler))) #("
}

void" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t face font-lock-type-face) 7 8 (fontified t c-type c-decl-id-start face font-lock-type-face)) #("    query_train_by_id(train_list, id, result);
" 0 47 (fontified t yank-handler (evil-yank-line-handler))) #("using std::cout;
" 0 4 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 4 5 (face font-lock-type-face c-type c-decl-id-start fontified t yank-handler (evil-yank-line-handler)) 5 6 (fontified t yank-handler (evil-yank-line-handler)) 6 9 (face font-lock-variable-name-face fontified t yank-handler (evil-yank-line-handler)) 9 16 (fontified t yank-handler (evil-yank-line-handler)) 16 17 (fontified t yank-handler (evil-yank-line-handler))) #("    using std::vector; using std::string; using std::endl;
" 0 4 (c-is-sws t c-in-sws t fontified t yank-handler (evil-yank-line-handler)) 4 5 (face font-lock-type-face c-is-sws t fontified t yank-handler (evil-yank-line-handler)) 5 8 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 8 9 (face font-lock-type-face c-type c-decl-id-start fontified t yank-handler (evil-yank-line-handler)) 9 10 (fontified t yank-handler (evil-yank-line-handler)) 10 13 (face font-lock-variable-name-face fontified t yank-handler (evil-yank-line-handler)) 13 23 (fontified t yank-handler (evil-yank-line-handler)) 23 27 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 27 28 (face font-lock-type-face c-type c-decl-id-start fontified t yank-handler (evil-yank-line-handler)) 28 29 (fontified t yank-handler (evil-yank-line-handler)) 29 32 (face font-lock-variable-name-face fontified t yank-handler (evil-yank-line-handler)) 32 42 (fontified t yank-handler (evil-yank-line-handler)) 42 46 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 46 47 (face font-lock-type-face c-type c-decl-id-start fontified t yank-handler (evil-yank-line-handler)) 47 48 (fontified t yank-handler (evil-yank-line-handler)) 48 51 (face font-lock-variable-name-face fontified t yank-handler (evil-yank-line-handler)) 51 59 (fontified t yank-handler (evil-yank-line-handler))) #("            Ticket() {}
" 0 12 (fontified t yank-handler (evil-yank-line-handler)) 12 13 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 13 14 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 14 17 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 17 18 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 18 19 (fontified t yank-handler (evil-yank-line-handler)) 19 20 (fontified t yank-handler (evil-yank-line-handler)) 20 21 (fontified t yank-handler (evil-yank-line-handler)) 21 22 (fontified t yank-handler (evil-yank-line-handler)) 22 23 (fontified t yank-handler (evil-yank-line-handler)) 23 24 (fontified t yank-handler (evil-yank-line-handler))) "" "" #("};
" 0 2 (yank-handler (evil-yank-line-handler) fontified t) 2 3 (yank-handler (evil-yank-line-handler))) #("{
" 0 1 (yank-handler (evil-yank-line-handler) fontified t c-is-sws t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("
namespace __TrainManage__
" 0 1 (yank-handler (evil-yank-line-handler) c-in-sws t c-is-sws t fontified t) 1 2 (yank-handler (evil-yank-line-handler) c-is-sws t fontified t face font-lock-keyword-face) 2 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t) 11 25 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 25 26 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-constant-face) 26 27 (yank-handler (evil-yank-line-handler) fontified t)) #("/* 返回队列头、尾元素 */
" 0 1 (yank-handler (evil-yank-line-handler) c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (yank-handler (evil-yank-line-handler) c-in-sws t fontified t face font-lock-comment-delimiter-face) 3 15 (yank-handler (evil-yank-line-handler) c-in-sws t fontified t face font-lock-comment-face) 15 16 (yank-handler (evil-yank-line-handler) c-in-sws t fontified t)) "ed without template parameters
 inline bool clist::empty() const
             ^~~~~
mylist.cpp:35:28: error: non-member function ‘bool empty()’ cannot have cv-qualifier
 inline bool clist::empty() const
                            ^~~~~
mylist.cpp:40:13: error: ‘template<class Object> class clist’ used without t" "ed without template parameters
 inline bool clist::empty() const
             ^~~~~
mylist.cpp:35:28: error: non-member function ‘bool empty()’ cannot have cv-qualifier
 inline bool clist::empty() const
                            ^~~~~
mylist.cpp:40:13: error: ‘template<class Object> class clist’ used without t" "import java.awt.BorderLayout;   
import java.awt.Button;   
import java.awt.Dialog;   
import java.awt.FileDialog;   
import java.awt.FlowLayout;   
import java.awt.Font;   
import java.awt.Frame;   
import java.awt.GridLayout;   
import java.awt.Label;   
import java.awt.List;   
import java.awt.Menu;   
import java.awt.MenuBar;   
import java.awt.MenuItem;   
import java.awt.MenuShortcut;   
import java.awt.Panel;   
import java.awt.TextArea;   
import java.awt.Toolkit;   
import java.awt.datatransfer.Clipboard;   
import java.awt.datatransfer.DataFlavor;   
import java.awt.datatransfer.StringSelection;   
import java.awt.datatransfer.Transferable;   
import java.awt.event.ActionEvent;   
import java.awt.event.ActionListener;   
import java.awt.event.KeyEvent;   
import java.awt.event.TextEvent;   
import java.awt.event.TextListener;   
import java.awt.event.WindowAdapter;   
import java.awt.event.WindowEvent;   
import java.io.BufferedReader;   
import java.io.BufferedWriter;   
import java.io.FileReader;   
import java.io.FileWriter;   
  
import javax.swing.undo.UndoManager;   
  
  
  
  
  
  
public class Txt extends Frame  implements ActionListener,TextListener   
{   
           
    private static final long serialVersionUID = 1L;   
      
    //*****************初始化工作**************   
       
    MenuBar menuBar;   
    Menu menuFile,menuEdi,menuFormat,menuHelp;   
    MenuItem menuItemNew,menuItemOpen,menuItemSave,menuItemOsave,menuItemExit,   
             menuItemCut,menuItemCopy,menuItemPase,menuItemDel,menuItemSelectAll,   
             menuItemFont,menuItemAbout;   
    TextArea textArea;   
    FileDialog fileOpen,fileSave;   
    String temp,fileName;   
    MyDialog myDialog;   
    boolean change=false;   
    TextClipboard cb;   
    UndoManager undoManager=new UndoManager();   
  
       
    public Txt()   
    {   
        super(\"文本编辑器\");   
        this.setBounds(200, 200, 400, 300);   
        menuBar=new MenuBar();   
        textArea=new TextArea();   
        textArea.addTextListener(this);   
           
        menuFile=new Menu(\"文件(F)\");   
        menuItemNew=new MenuItem(\"新建(N)\");   
        menuItemNew.setShortcut(new MenuShortcut(KeyEvent.VK_N));   
        menuItemNew.addActionListener(this);   
        menuItemOpen=new MenuItem(\"打开(O)...\");   
        menuItemOpen.setShortcut(new MenuShortcut(KeyEvent.VK_O));   
        menuItemOpen.addActionListener(this);   
        menuItemSave=new MenuItem(\"保存(S)\");   
        menuItemSave.setShortcut(new MenuShortcut(KeyEvent.VK_S));   
        menuItemSave.addActionListener(this);   
        menuItemOsave=new MenuItem(\"另存为(A)...\");   
        menuItemOsave.addActionListener(this);   
        menuItemExit=new MenuItem(\"退出(X)\");   
        menuItemExit.addActionListener(this);   
        menuItemExit.setShortcut(new MenuShortcut(KeyEvent.VK_E));   
        menuFile.add(menuItemNew);   
        menuFile.add(menuItemOpen);   
        menuFile.add(menuItemSave);   
        menuFile.add(menuItemOsave);   
        menuFile.addSeparator();   
        menuFile.add(menuItemExit);   
           
        menuEdi=new Menu(\"编辑(E)\");   
        menuItemCut=new MenuItem(\"剪切(T)\");   
        menuItemCut.setShortcut(new MenuShortcut(KeyEvent.VK_X));   
        menuItemCut.addActionListener(this);   
        menuItemCopy=new MenuItem(\"复制(C)\");   
        menuItemCopy.setShortcut(new MenuShortcut(KeyEvent.VK_C));   
        menuItemCopy.addActionListener(this);   
        menuItemPase=new MenuItem(\"粘帖(P)\");   
        menuItemPase.setShortcut(new MenuShortcut(KeyEvent.VK_V));   
        menuItemPase.addActionListener(this);   
        menuItemDel=new MenuItem(\"删除(L)\");   
        menuItemDel.addActionListener(this);   
        menuItemSelectAll=new MenuItem(\"全选(A)\");   
        menuItemSelectAll.setShortcut(new MenuShortcut(KeyEvent.VK_A));   
        menuItemSelectAll.addActionListener(this);   
           
        menuEdi.add(menuItemCut);   
        menuEdi.add(menuItemCopy);   
        menuEdi.add(menuItemPase);   
        menuEdi.add(menuItemDel);   
        menuEdi.addSeparator();   
        menuEdi.add(menuItemSelectAll);   
           
        menuFormat=new Menu(\"格式(O)\");   
        menuItemFont=new MenuItem(\"字体...\");   
        menuItemFont.addActionListener(this);   
        menuFormat.add(menuItemFont);   
           
        menuHelp=new Menu(\"帮助(H)\");   
        menuItemAbout=new MenuItem(\"关于记事本\");   
        menuItemAbout.addActionListener(this);   
        menuHelp.add(menuItemAbout);   
           
        menuBar.add(menuFile);   
        menuBar.add(menuEdi);   
        menuBar.add(menuFormat);   
        menuBar.add(menuHelp);   
           
        fileName=\"\";   
           
        myDialog=new MyDialog(this, \"保存文件？\", true);   
           
        fileSave=new FileDialog(this,\"保存文件\",FileDialog.SAVE);   
        fileSave.setBounds(200, 200, 400, 300);   
        fileOpen=new FileDialog(this,\"打开文件\",FileDialog.LOAD);   
        fileOpen.setBounds(200, 200, 400, 300);   
           
        cb=new TextClipboard();   
        this.addWindowListener(new WindowAdapter()   
        {   
            public void windowClosing(WindowEvent arg0)    
            {   
                if(fileName!=\"\")   
                {   
                    if(change==false)   
                        System.exit(0);   
                    if(change==true)   
                    {   
                        save(fileName);   
                        System.exit(0);   
                    }   
                           
                }   
                       
                if(fileName==\"\")   
                {   
                    if(change==false)   
                        System.exit(0);   
                    if(change==true)   
                    {   
                        myDialog.setVisible(true);   
                        if(myDialog.getMessage()==MyDialog.YES)   
                        {   
                            fileSave.setVisible(true);   
                            fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                            save(fileName);   
                            System.exit(0);   
                        }   
                        if(myDialog.getMessage()==MyDialog.NO)   
                            System.exit(0);   
                    }   
                }                  
                   
            }   
        });   
        this.setMenuBar(menuBar);   
        this.add(textArea);   
        this.setVisible(true);   
    }   
       
    //*****************办法**************   
       
    public void open(String path)   
    {   
       try {   
            FileReader file=new FileReader(path);   
            BufferedReader read=new BufferedReader(file);   
            StringBuffer sb=new StringBuffer();   
            while((temp=read.readLine())!=null)   
                sb.append(temp+'/n');   
            textArea.setText(sb.toString());   
            file.close();   
            read.close();   
            } catch (Exception e) {   
        }   
    }   
       
    public void save(String path)   
    {   
        try{   
            FileWriter file=new FileWriter(path);   
            BufferedWriter bw=new BufferedWriter(file);   
            bw.write(textArea.getText());   
            bw.close();   
        }   
        catch(Exception e)   
        {   
        }   
    }   
       
    //*****************事件监听器**************   
    public void textValueChanged(TextEvent arg0) {   
        change=true;   
    }   
    public void actionPerformed(ActionEvent e)    
    {   
        if(e.getSource()==menuItemNew)   
        {   
            if(fileName!=\"\")   
            {   
                save(fileName);   
                textArea.setText(\"\");   
            }   
                   
            if(fileName==\"\"&&change==true)   
            {   
                fileSave.setVisible(true);   
                fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                save(fileName);   
                textArea.setText(\"\");   
            }   
            else {   
                textArea.setText(\"\");   
                fileName=\"\";   
            }      
        }   
        if(e.getSource()==menuItemOpen)   
        {   
            fileOpen.setVisible(true);   
            fileName=fileOpen.getDirectory()+\"//\"+fileOpen.getFile();   
            open(fileName);   
               
        }   
        if(e.getSource()==menuItemSave)   
        {   
            if(fileName!=\"\")   
                save(fileName);   
            else  
            {   
                fileSave.setVisible(true);   
                fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                save(fileName);   
            }   
        }   
        if(e.getSource()==menuItemOsave)   
        {   
            fileSave.setVisible(true);   
            fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
            save(fileName);   
        }   
        if(e.getSource()==menuItemExit)   
        {   
            if(fileName!=\"\")   
            {   
                if(change==false)   
                    System.exit(0);   
                if(change==true)   
                {   
                    save(fileName);   
                    System.exit(0);   
                }   
                       
            }   
                   
            if(fileName==\"\")   
            {   
                if(change==false)   
                    System.exit(0);   
                if(change==true)   
                {   
                    myDialog.setVisible(true);   
                    if(myDialog.getMessage()==MyDialog.YES)   
                    {   
                        fileSave.setVisible(true);   
                        fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                        save(fileName);   
                        System.exit(0);   
                    }   
                    if(myDialog.getMessage()==MyDialog.NO)   
                        System.exit(0);   
                }   
            }          
        }   
        if(e.getSource()==menuItemCut)   
        {   
            cb.setData(textArea.getSelectedText());   
            textArea.replaceRange(\"\", textArea.getSelectionStart(), textArea.getSelectionEnd());   
        }   
        if(e.getSource()==menuItemCopy)   
        {   
            cb.setData(textArea.getSelectedText());   
        }   
        if(e.getSource()==menuItemPase)   
        {   
            textArea.replaceRange(cb.getData(), textArea.getSelectionStart(), textArea.getSelectionEnd());   
        }   
        if(e.getSource()==menuItemDel)   
        {   
            textArea.replaceRange(\"\", textArea.getSelectionStart(), textArea.getSelectionEnd());   
        }   
        if(e.getSource()==menuItemSelectAll)   
        {   
            textArea.selectAll();   
        }   
        if(e.getSource()==menuItemFont)   
        {   
            SetFont setfont=new SetFont(this,\"字体设置\",true);   
            setfont.setVisible(true);   
            textArea.setFont(setfont.myFont);   
               
        }   
        if(e.getSource()==menuItemAbout)   
        {   
            DialogAbout diaAbout=new DialogAbout(this,\"关于文本编辑器\",true);   
            diaAbout.setVisible(true);   
        }   
    }   
       
    public static void main(String[] args)    
    {   
        new Txt();   
    }   
}   
  
//*****************保存提示框类**************   
  
class MyDialog extends Dialog implements ActionListener    
{   
    /**   
     *    
     */   
    private static final long serialVersionUID = 1L;   
    static final int YES = 1, NO = 0;   
    int message = -1;   
    Button yes, no;   
  
    MyDialog(Frame f, String s, boolean b)    
    {   
        super(f, s, b);   
        yes = new Button(\"保存文件\");   
        yes.addActionListener(this);   
        no = new Button(\"不保存并退出\");   
        no.addActionListener(this);   
        setLayout(new FlowLayout());   
        add(yes);   
        add(no);   
        setBounds(300, 300, 200, 80);   
        addWindowListener(new WindowAdapter() {   
            public void windowClosing(WindowEvent e) {   
                message = -1;   
                setVisible(false);   
            }   
        });   
    }   
  
    public void actionPerformed(ActionEvent e) {   
        if (e.getSource() == yes) {   
            message = YES;   
            setVisible(false);   
        } else if (e.getSource() == no) {   
            message = NO;   
            setVisible(false);   
        }   
    }   
  
    public int getMessage() {   
        return message;   
    }   
}   
  
//*****************关于对话框类**************   
  
class DialogAbout extends Dialog implements ActionListener   
{   
    private static final long serialVersionUID = 1L;   
    Button button;   
    Label l;   
    DialogAbout(Frame f, String s, boolean b)    
    {   
        super(f,s,b);   
        setLayout(new FlowLayout());   
        button=new Button(\"了解\");   
        l=new Label(\"菜鸟级人物编写--LECYKX\");   
        button.addActionListener(this);   
        add(l);   
        add(button);   
        setBounds(300, 300, 200, 100);   
        addWindowListener(new WindowAdapter() {   
            public void windowClosing(WindowEvent e) {   
                setVisible(false);   
            }   
        });   
    }   
       
    public void actionPerformed(ActionEvent e) {   
        if(e.getSource()==button)   
        {   
            setVisible(false);   
        }   
    }   
}   
//*****************剪切板类**************   
  
class TextClipboard   
{   
    private Clipboard cb;   
    public TextClipboard(){   
        cb=Toolkit.getDefaultToolkit().getSystemClipboard();   
    }   
    public void setData(String data){   
        cb.setContents(new StringSelection(data),null);   
    }   
    public String getData(){   
        Transferable content=cb.getContents(null);   
        try{   
            return (String) content.getTransferData(DataFlavor.stringFlavor);   
        }catch(Exception e){}   
        return null;   
    }   
}   
//*****************字体设置类**************   
  
class SetFont extends Dialog implements ActionListener   
{   
    private static final long serialVersionUID = 1L;   
       
    Panel p1,p2,p3;   
    Label labelName,labelStyle,labelSize;   
    List listName,listStyle,listSize;   
    Button yes;   
    Font myFont;   
       
    SetFont(Frame f, String s, boolean b)   
    {   
        super(f,s,b);   
        this.setBounds(250, 250, 420, 180);   
        this.setLayout(new BorderLayout());   
           
        p1=new Panel();   
        p1.setLayout(new GridLayout(1,3));   
        labelName=new Label(\"字体(F):\",Label.LEFT);   
        labelStyle=new Label(\"字形(Y):\",Label.LEFT);   
        labelSize=new Label(\"大小(S):\",Label.LEFT);   
        p1.add(labelName);   
        p1.add(labelStyle);   
        p1.add(labelSize);   
           
        listName=new List(4);   
        listName.add(\"宋体\");   
        listName.add(\"黑体\");   
        listName.add(\"华文行楷\");   
        listName.add(\"华文新魏\");   
        listName.add(\"楷体\");   
        listName.add(\"隶书\");   
        listName.select(0);   
           
        listStyle=new List(4);   
        listStyle.add(\"常规\");   
        listStyle.add(\"粗体\");   
        listStyle.add(\"斜体\");   
        listStyle.add(\"粗体斜体\");   
        listName.select(0);   
           
        listSize=new List(4);   
        listSize.add(\"8\");   
        listSize.add(\"9\");   
        listSize.add(\"10\");   
        listSize.add(\"11\");   
        listSize.add(\"12\");   
        listSize.add(\"14\");   
        listSize.add(\"16\");   
        listSize.add(\"18\");   
        listSize.add(\"20\");   
        listSize.select(4);   
           
        p2=new Panel();   
        p2.add(listName);   
        p2.add(listStyle);   
        p2.add(listSize);   
           
        p3=new Panel();   
        yes=new Button(\"确定\");   
        yes.addActionListener(this);   
        p3.add(yes);   
           
        this.add(p1,BorderLayout.NORTH);   
        this.add(p2,BorderLayout.CENTER);   
        this.add(p3,BorderLayout.SOUTH);   
           
        this.addWindowListener(new WindowAdapter() {   
            public void windowClosing(WindowEvent e) {   
                setVisible(false);   
            }   
        });   
           
    }   
    public Font getFont()   
    {   
        int style=Font.PLAIN;;   
        int size=Integer.parseInt(listSize.getSelectedItem());   
        if(listStyle.getSelectedIndex()==0)   
            style=Font.PLAIN;   
        if(listStyle.getSelectedIndex()==1)   
            style=Font.BOLD;   
        if(listStyle.getSelectedIndex()==2)   
            style=Font.ITALIC;   
        if(listStyle.getSelectedIndex()==3)   
            style=(Font.BOLD|Font.ITALIC);   
        return myFont=new Font(listName.getSelectedItem(),style,size);   
           
    }   
    public void actionPerformed(ActionEvent e)    
    {   
        if(e.getSource()==yes)   
        {   
            this.getFont();   
            this.setVisible(false);   
        }   
    }   
       
}  " "import java.awt.BorderLayout;   
import java.awt.Button;   
import java.awt.Dialog;   
import java.awt.FileDialog;   
import java.awt.FlowLayout;   
import java.awt.Font;   
import java.awt.Frame;   
import java.awt.GridLayout;   
import java.awt.Label;   
import java.awt.List;   
import java.awt.Menu;   
import java.awt.MenuBar;   
import java.awt.MenuItem;   
import java.awt.MenuShortcut;   
import java.awt.Panel;   
import java.awt.TextArea;   
import java.awt.Toolkit;   
import java.awt.datatransfer.Clipboard;   
import java.awt.datatransfer.DataFlavor;   
import java.awt.datatransfer.StringSelection;   
import java.awt.datatransfer.Transferable;   
import java.awt.event.ActionEvent;   
import java.awt.event.ActionListener;   
import java.awt.event.KeyEvent;   
import java.awt.event.TextEvent;   
import java.awt.event.TextListener;   
import java.awt.event.WindowAdapter;   
import java.awt.event.WindowEvent;   
import java.io.BufferedReader;   
import java.io.BufferedWriter;   
import java.io.FileReader;   
import java.io.FileWriter;   
  
import javax.swing.undo.UndoManager;   
  
  
  
  
  
  
public class Txt extends Frame  implements ActionListener,TextListener   
{   
           
    private static final long serialVersionUID = 1L;   
      
    //*****************初始化工作**************   
       
    MenuBar menuBar;   
    Menu menuFile,menuEdi,menuFormat,menuHelp;   
    MenuItem menuItemNew,menuItemOpen,menuItemSave,menuItemOsave,menuItemExit,   
             menuItemCut,menuItemCopy,menuItemPase,menuItemDel,menuItemSelectAll,   
             menuItemFont,menuItemAbout;   
    TextArea textArea;   
    FileDialog fileOpen,fileSave;   
    String temp,fileName;   
    MyDialog myDialog;   
    boolean change=false;   
    TextClipboard cb;   
    UndoManager undoManager=new UndoManager();   
  
       
    public Txt()   
    {   
        super(\"文本编辑器\");   
        this.setBounds(200, 200, 400, 300);   
        menuBar=new MenuBar();   
        textArea=new TextArea();   
        textArea.addTextListener(this);   
           
        menuFile=new Menu(\"文件(F)\");   
        menuItemNew=new MenuItem(\"新建(N)\");   
        menuItemNew.setShortcut(new MenuShortcut(KeyEvent.VK_N));   
        menuItemNew.addActionListener(this);   
        menuItemOpen=new MenuItem(\"打开(O)...\");   
        menuItemOpen.setShortcut(new MenuShortcut(KeyEvent.VK_O));   
        menuItemOpen.addActionListener(this);   
        menuItemSave=new MenuItem(\"保存(S)\");   
        menuItemSave.setShortcut(new MenuShortcut(KeyEvent.VK_S));   
        menuItemSave.addActionListener(this);   
        menuItemOsave=new MenuItem(\"另存为(A)...\");   
        menuItemOsave.addActionListener(this);   
        menuItemExit=new MenuItem(\"退出(X)\");   
        menuItemExit.addActionListener(this);   
        menuItemExit.setShortcut(new MenuShortcut(KeyEvent.VK_E));   
        menuFile.add(menuItemNew);   
        menuFile.add(menuItemOpen);   
        menuFile.add(menuItemSave);   
        menuFile.add(menuItemOsave);   
        menuFile.addSeparator();   
        menuFile.add(menuItemExit);   
           
        menuEdi=new Menu(\"编辑(E)\");   
        menuItemCut=new MenuItem(\"剪切(T)\");   
        menuItemCut.setShortcut(new MenuShortcut(KeyEvent.VK_X));   
        menuItemCut.addActionListener(this);   
        menuItemCopy=new MenuItem(\"复制(C)\");   
        menuItemCopy.setShortcut(new MenuShortcut(KeyEvent.VK_C));   
        menuItemCopy.addActionListener(this);   
        menuItemPase=new MenuItem(\"粘帖(P)\");   
        menuItemPase.setShortcut(new MenuShortcut(KeyEvent.VK_V));   
        menuItemPase.addActionListener(this);   
        menuItemDel=new MenuItem(\"删除(L)\");   
        menuItemDel.addActionListener(this);   
        menuItemSelectAll=new MenuItem(\"全选(A)\");   
        menuItemSelectAll.setShortcut(new MenuShortcut(KeyEvent.VK_A));   
        menuItemSelectAll.addActionListener(this);   
           
        menuEdi.add(menuItemCut);   
        menuEdi.add(menuItemCopy);   
        menuEdi.add(menuItemPase);   
        menuEdi.add(menuItemDel);   
        menuEdi.addSeparator();   
        menuEdi.add(menuItemSelectAll);   
           
        menuFormat=new Menu(\"格式(O)\");   
        menuItemFont=new MenuItem(\"字体...\");   
        menuItemFont.addActionListener(this);   
        menuFormat.add(menuItemFont);   
           
        menuHelp=new Menu(\"帮助(H)\");   
        menuItemAbout=new MenuItem(\"关于记事本\");   
        menuItemAbout.addActionListener(this);   
        menuHelp.add(menuItemAbout);   
           
        menuBar.add(menuFile);   
        menuBar.add(menuEdi);   
        menuBar.add(menuFormat);   
        menuBar.add(menuHelp);   
           
        fileName=\"\";   
           
        myDialog=new MyDialog(this, \"保存文件？\", true);   
           
        fileSave=new FileDialog(this,\"保存文件\",FileDialog.SAVE);   
        fileSave.setBounds(200, 200, 400, 300);   
        fileOpen=new FileDialog(this,\"打开文件\",FileDialog.LOAD);   
        fileOpen.setBounds(200, 200, 400, 300);   
           
        cb=new TextClipboard();   
        this.addWindowListener(new WindowAdapter()   
        {   
            public void windowClosing(WindowEvent arg0)    
            {   
                if(fileName!=\"\")   
                {   
                    if(change==false)   
                        System.exit(0);   
                    if(change==true)   
                    {   
                        save(fileName);   
                        System.exit(0);   
                    }   
                           
                }   
                       
                if(fileName==\"\")   
                {   
                    if(change==false)   
                        System.exit(0);   
                    if(change==true)   
                    {   
                        myDialog.setVisible(true);   
                        if(myDialog.getMessage()==MyDialog.YES)   
                        {   
                            fileSave.setVisible(true);   
                            fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                            save(fileName);   
                            System.exit(0);   
                        }   
                        if(myDialog.getMessage()==MyDialog.NO)   
                            System.exit(0);   
                    }   
                }                  
                   
            }   
        });   
        this.setMenuBar(menuBar);   
        this.add(textArea);   
        this.setVisible(true);   
    }   
       
    //*****************办法**************   
       
    public void open(String path)   
    {   
       try {   
            FileReader file=new FileReader(path);   
            BufferedReader read=new BufferedReader(file);   
            StringBuffer sb=new StringBuffer();   
            while((temp=read.readLine())!=null)   
                sb.append(temp+'/n');   
            textArea.setText(sb.toString());   
            file.close();   
            read.close();   
            } catch (Exception e) {   
        }   
    }   
       
    public void save(String path)   
    {   
        try{   
            FileWriter file=new FileWriter(path);   
            BufferedWriter bw=new BufferedWriter(file);   
            bw.write(textArea.getText());   
            bw.close();   
        }   
        catch(Exception e)   
        {   
        }   
    }   
       
    //*****************事件监听器**************   
    public void textValueChanged(TextEvent arg0) {   
        change=true;   
    }   
    public void actionPerformed(ActionEvent e)    
    {   
        if(e.getSource()==menuItemNew)   
        {   
            if(fileName!=\"\")   
            {   
                save(fileName);   
                textArea.setText(\"\");   
            }   
                   
            if(fileName==\"\"&&change==true)   
            {   
                fileSave.setVisible(true);   
                fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                save(fileName);   
                textArea.setText(\"\");   
            }   
            else {   
                textArea.setText(\"\");   
                fileName=\"\";   
            }      
        }   
        if(e.getSource()==menuItemOpen)   
        {   
            fileOpen.setVisible(true);   
            fileName=fileOpen.getDirectory()+\"//\"+fileOpen.getFile();   
            open(fileName);   
               
        }   
        if(e.getSource()==menuItemSave)   
        {   
            if(fileName!=\"\")   
                save(fileName);   
            else  
            {   
                fileSave.setVisible(true);   
                fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                save(fileName);   
            }   
        }   
        if(e.getSource()==menuItemOsave)   
        {   
            fileSave.setVisible(true);   
            fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
            save(fileName);   
        }   
        if(e.getSource()==menuItemExit)   
        {   
            if(fileName!=\"\")   
            {   
                if(change==false)   
                    System.exit(0);   
                if(change==true)   
                {   
                    save(fileName);   
                    System.exit(0);   
                }   
                       
            }   
                   
            if(fileName==\"\")   
            {   
                if(change==false)   
                    System.exit(0);   
                if(change==true)   
                {   
                    myDialog.setVisible(true);   
                    if(myDialog.getMessage()==MyDialog.YES)   
                    {   
                        fileSave.setVisible(true);   
                        fileName=fileSave.getDirectory()+\"//\"+fileSave.getFile();   
                        save(fileName);   
                        System.exit(0);   
                    }   
                    if(myDialog.getMessage()==MyDialog.NO)   
                        System.exit(0);   
                }   
            }          
        }   
        if(e.getSource()==menuItemCut)   
        {   
            cb.setData(textArea.getSelectedText());   
            textArea.replaceRange(\"\", textArea.getSelectionStart(), textArea.getSelectionEnd());   
        }   
        if(e.getSource()==menuItemCopy)   
        {   
            cb.setData(textArea.getSelectedText());   
        }   
        if(e.getSource()==menuItemPase)   
        {   
            textArea.replaceRange(cb.getData(), textArea.getSelectionStart(), textArea.getSelectionEnd());   
        }   
        if(e.getSource()==menuItemDel)   
        {   
            textArea.replaceRange(\"\", textArea.getSelectionStart(), textArea.getSelectionEnd());   
        }   
        if(e.getSource()==menuItemSelectAll)   
        {   
            textArea.selectAll();   
        }   
        if(e.getSource()==menuItemFont)   
        {   
            SetFont setfont=new SetFont(this,\"字体设置\",true);   
            setfont.setVisible(true);   
            textArea.setFont(setfont.myFont);   
               
        }   
        if(e.getSource()==menuItemAbout)   
        {   
            DialogAbout diaAbout=new DialogAbout(this,\"关于文本编辑器\",true);   
            diaAbout.setVisible(true);   
        }   
    }   
       
    public static void main(String[] args)    
    {   
        new Txt();   
    }   
}   
  
//*****************保存提示框类**************   
  
class MyDialog extends Dialog implements ActionListener    
{   
    /**   
     *    
     */   
    private static final long serialVersionUID = 1L;   
    static final int YES = 1, NO = 0;   
    int message = -1;   
    Button yes, no;   
  
    MyDialog(Frame f, String s, boolean b)    
    {   
        super(f, s, b);   
        yes = new Button(\"保存文件\");   
        yes.addActionListener(this);   
        no = new Button(\"不保存并退出\");   
        no.addActionListener(this);   
        setLayout(new FlowLayout());   
        add(yes);   
        add(no);   
        setBounds(300, 300, 200, 80);   
        addWindowListener(new WindowAdapter() {   
            public void windowClosing(WindowEvent e) {   
                message = -1;   
                setVisible(false);   
            }   
        });   
    }   
  
    public void actionPerformed(ActionEvent e) {   
        if (e.getSource() == yes) {   
            message = YES;   
            setVisible(false);   
        } else if (e.getSource() == no) {   
            message = NO;   
            setVisible(false);   
        }   
    }   
  
    public int getMessage() {   
        return message;   
    }   
}   
  
//*****************关于对话框类**************   
  
class DialogAbout extends Dialog implements ActionListener   
{   
    private static final long serialVersionUID = 1L;   
    Button button;   
    Label l;   
    DialogAbout(Frame f, String s, boolean b)    
    {   
        super(f,s,b);   
        setLayout(new FlowLayout());   
        button=new Button(\"了解\");   
        l=new Label(\"菜鸟级人物编写--LECYKX\");   
        button.addActionListener(this);   
        add(l);   
        add(button);   
        setBounds(300, 300, 200, 100);   
        addWindowListener(new WindowAdapter() {   
            public void windowClosing(WindowEvent e) {   
                setVisible(false);   
            }   
        });   
    }   
       
    public void actionPerformed(ActionEvent e) {   
        if(e.getSource()==button)   
        {   
            setVisible(false);   
        }   
    }   
}   
//*****************剪切板类**************   
  
class TextClipboard   
{   
    private Clipboard cb;   
    public TextClipboard(){   
        cb=Toolkit.getDefaultToolkit().getSystemClipboard();   
    }   
    public void setData(String data){   
        cb.setContents(new StringSelection(data),null);   
    }   
    public String getData(){   
        Transferable content=cb.getContents(null);   
        try{   
            return (String) content.getTransferData(DataFlavor.stringFlavor);   
        }catch(Exception e){}   
        return null;   
    }   
}   
//*****************字体设置类**************   
  
class SetFont extends Dialog implements ActionListener   
{   
    private static final long serialVersionUID = 1L;   
       
    Panel p1,p2,p3;   
    Label labelName,labelStyle,labelSize;   
    List listName,listStyle,listSize;   
    Button yes;   
    Font myFont;   
       
    SetFont(Frame f, String s, boolean b)   
    {   
        super(f,s,b);   
        this.setBounds(250, 250, 420, 180);   
        this.setLayout(new BorderLayout());   
           
        p1=new Panel();   
        p1.setLayout(new GridLayout(1,3));   
        labelName=new Label(\"字体(F):\",Label.LEFT);   
        labelStyle=new Label(\"字形(Y):\",Label.LEFT);   
        labelSize=new Label(\"大小(S):\",Label.LEFT);   
        p1.add(labelName);   
        p1.add(labelStyle);   
        p1.add(labelSize);   
           
        listName=new List(4);   
        listName.add(\"宋体\");   
        listName.add(\"黑体\");   
        listName.add(\"华文行楷\");   
        listName.add(\"华文新魏\");   
        listName.add(\"楷体\");   
        listName.add(\"隶书\");   
        listName.select(0);   
           
        listStyle=new List(4);   
        listStyle.add(\"常规\");   
        listStyle.add(\"粗体\");   
        listStyle.add(\"斜体\");   
        listStyle.add(\"粗体斜体\");   
        listName.select(0);   
           
        listSize=new List(4);   
        listSize.add(\"8\");   
        listSize.add(\"9\");   
        listSize.add(\"10\");   
        listSize.add(\"11\");   
        listSize.add(\"12\");   
        listSize.add(\"14\");   
        listSize.add(\"16\");   
        listSize.add(\"18\");   
        listSize.add(\"20\");   
        listSize.select(4);   
           
        p2=new Panel();   
        p2.add(listName);   
        p2.add(listStyle);   
        p2.add(listSize);   
           
        p3=new Panel();   
        yes=new Button(\"确定\");   
        yes.addActionListener(this);   
        p3.add(yes);   
           
        this.add(p1,BorderLayout.NORTH);   
        this.add(p2,BorderLayout.CENTER);   
        this.add(p3,BorderLayout.SOUTH);   
           
        this.addWindowListener(new WindowAdapter() {   
            public void windowClosing(WindowEvent e) {   
                setVisible(false);   
            }   
        });   
           
    }   
    public Font getFont()   
    {   
        int style=Font.PLAIN;;   
        int size=Integer.parseInt(listSize.getSelectedItem());   
        if(listStyle.getSelectedIndex()==0)   
            style=Font.PLAIN;   
        if(listStyle.getSelectedIndex()==1)   
            style=Font.BOLD;   
        if(listStyle.getSelectedIndex()==2)   
            style=Font.ITALIC;   
        if(listStyle.getSelectedIndex()==3)   
            style=(Font.BOLD|Font.ITALIC);   
        return myFont=new Font(listName.getSelectedItem(),style,size);   
           
    }   
    public void actionPerformed(ActionEvent e)    
    {   
        if(e.getSource()==yes)   
        {   
            this.getFont();   
            this.setVisible(false);   
        }   
    }   
       
}  " "public calculate(){
    setTitle(\"计算器\");
    setSize(300,300);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
    Toolkit kit = Toolkit.getDefaultToolkit();  
    Dimension screenSize = kit.getScreenSize();//获取屏幕分辨率  
    setLocation(screenSize.width/4,screenSize.height/4);//位置  
    for ( i =9; i>=0; i--) {  
        b[i] = new JButton(Integer.toString(i));// 实例化数字按钮   
        b[i].addActionListener(new MyListener1());  
        panel2.add(b[i]); // 增加按钮到面板  
          
    }

    setLayout(new FlowLayout()); // 设置布局管理器   
    panel1.setLayout(new FlowLayout());  
    panel2.setLayout(new GridLayout(4,3,10,8));  
    panel3.setLayout(new GridLayout(4,1,8,12));   
    clear.setFont(new Font(\"隶书\",Font.PLAIN,15));  
    clear.setForeground(Color.RED);  
    clear.addActionListener(new MyListener1());  
    equal.setForeground(Color.RED);  
    equal.addActionListener(new MyListener1());  
    plus.setForeground(Color.RED);  
    plus.addActionListener(new MyListener1());  
    minus.setForeground(Color.RED);  
    minus.addActionListener(new MyListener1());  
    multi.setForeground(Color.RED);  
    multi.addActionListener(new MyListener1());  
    division.setForeground(Color.RED);  
    division.addActionListener(new MyListener1());  
    equal.setFont(new Font(\"隶书\",Font.PLAIN,20));  
    plus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    minus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    multi.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    division.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    point.addActionListener(new MyListener1());  
    panel1.add(answer);  
    panel1.add(clear);  
    panel2.add(point);  
    panel2.add(equal);  
    panel3.add(plus);  
    panel3.add(minus);  
    panel3.add(multi);  
    panel3.add(division);  
    add(panel1);   
    add(panel2);  
    add(panel3);  
}  
  
 class MyListener1 implements ActionListener{  
    public void actionPerformed(ActionEvent e){  
          
        for(int i=0;i<=9;i++) {  
            if(e.getSource()==b[i]||e.getSource()==point){  
                answer.setText(\"\");  
                if(e.getSource()==point){  
                      
                    s=foreText+\".\";  
                    answer.setText(s);  
                }else{  
                if(s!=\"\"){  
                    answer.setText(s+b[i].getText());  
                    foreText=s+b[i].getText();//此处应当修改，  
                }else{  
                    answer.setText(foreText+b[i].getText());  
                foreText=foreText+b[i].getText();  
                }  
                }  
                }  
        }  
        if(e.getSource()==clear){  
            foreText=\"\";  
            s=\"\";  
            answer.setText(\"\");  
        }  
        if(e.getSource()==plus||e.getSource()==minus||e.getSource()==multi||e.getSource()==division){  
            dFore=Double.parseDouble(foreText);  
            s=\"\";  
            foreText=\"\";  
            answer.setText(\"\");  
            op=e.getSource();  
        }  
        if(e.getSource()==equal){  
            dBack=Double.parseDouble(foreText);  
            foreText=\"\";  
            answer.setText(\"\");  
            if(op==plus){  
                d=dFore+dBack;  
            }  
            if(op==minus){  
                d=dFore-dBack;  
            }  
            if(op==multi){  
                d=dFore*dBack;  
            }  
            if(op==division){  
                d=dFore/dBack;  
            }  
            answer.setText(\"\"+d);  
        }  
    }  
}  
}
" "public calculate(){
    setTitle(\"计算器\");
    setSize(300,300);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
    Toolkit kit = Toolkit.getDefaultToolkit();  
    Dimension screenSize = kit.getScreenSize();//获取屏幕分辨率  
    setLocation(screenSize.width/4,screenSize.height/4);//位置  
    for ( i =9; i>=0; i--) {  
        b[i] = new JButton(Integer.toString(i));// 实例化数字按钮   
        b[i].addActionListener(new MyListener1());  
        panel2.add(b[i]); // 增加按钮到面板  
          
    }

    setLayout(new FlowLayout()); // 设置布局管理器   
    panel1.setLayout(new FlowLayout());  
    panel2.setLayout(new GridLayout(4,3,10,8));  
    panel3.setLayout(new GridLayout(4,1,8,12));   
    clear.setFont(new Font(\"隶书\",Font.PLAIN,15));  
    clear.setForeground(Color.RED);  
    clear.addActionListener(new MyListener1());  
    equal.setForeground(Color.RED);  
    equal.addActionListener(new MyListener1());  
    plus.setForeground(Color.RED);  
    plus.addActionListener(new MyListener1());  
    minus.setForeground(Color.RED);  
    minus.addActionListener(new MyListener1());  
    multi.setForeground(Color.RED);  
    multi.addActionListener(new MyListener1());  
    division.setForeground(Color.RED);  
    division.addActionListener(new MyListener1());  
    equal.setFont(new Font(\"隶书\",Font.PLAIN,20));  
    plus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    minus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    multi.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    division.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    point.addActionListener(new MyListener1());  
    panel1.add(answer);  
    panel1.add(clear);  
    panel2.add(point);  
    panel2.add(equal);  
    panel3.add(plus);  
    panel3.add(minus);  
    panel3.add(multi);  
    panel3.add(division);  
    add(panel1);   
    add(panel2);  
    add(panel3);  
}  
  
 class MyListener1 implements ActionListener{  
    public void actionPerformed(ActionEvent e){  
          
        for(int i=0;i<=9;i++) {  
            if(e.getSource()==b[i]||e.getSource()==point){  
                answer.setText(\"\");  
                if(e.getSource()==point){  
                      
                    s=foreText+\".\";  
                    answer.setText(s);  
                }else{  
                if(s!=\"\"){  
                    answer.setText(s+b[i].getText());  
                    foreText=s+b[i].getText();//此处应当修改，  
                }else{  
                    answer.setText(foreText+b[i].getText());  
                foreText=foreText+b[i].getText();  
                }  
                }  
                }  
        }  
        if(e.getSource()==clear){  
            foreText=\"\";  
            s=\"\";  
            answer.setText(\"\");  
        }  
        if(e.getSource()==plus||e.getSource()==minus||e.getSource()==multi||e.getSource()==division){  
            dFore=Double.parseDouble(foreText);  
            s=\"\";  
            foreText=\"\";  
            answer.setText(\"\");  
            op=e.getSource();  
        }  
        if(e.getSource()==equal){  
            dBack=Double.parseDouble(foreText);  
            foreText=\"\";  
            answer.setText(\"\");  
            if(op==plus){  
                d=dFore+dBack;  
            }  
            if(op==minus){  
                d=dFore-dBack;  
            }  
            if(op==multi){  
                d=dFore*dBack;  
            }  
            if(op==division){  
                d=dFore/dBack;  
            }  
            answer.setText(\"\"+d);  
        }  
    }  
}  
}
" "public calculate(){
    setTitle(\"计算器\");
    setSize(300,300);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
    Toolkit kit = Toolkit.getDefaultToolkit();  
    Dimension screenSize = kit.getScreenSize();//获取屏幕分辨率  
    setLocation(screenSize.width/4,screenSize.height/4);//位置  
    for ( i =9; i>=0; i--) {  
        b[i] = new JButton(Integer.toString(i));// 实例化数字按钮   
        b[i].addActionListener(new MyListener1());  
        panel2.add(b[i]); // 增加按钮到面板  
          
    }

    setLayout(new FlowLayout()); // 设置布局管理器   
    panel1.setLayout(new FlowLayout());  
    panel2.setLayout(new GridLayout(4,3,10,8));  
    panel3.setLayout(new GridLayout(4,1,8,12));   
    clear.setFont(new Font(\"隶书\",Font.PLAIN,15));  
    clear.setForeground(Color.RED);  
    clear.addActionListener(new MyListener1());  
    equal.setForeground(Color.RED);  
    equal.addActionListener(new MyListener1());  
    plus.setForeground(Color.RED);  
    plus.addActionListener(new MyListener1());  
    minus.setForeground(Color.RED);  
    minus.addActionListener(new MyListener1());  
    multi.setForeground(Color.RED);  
    multi.addActionListener(new MyListener1());  
    division.setForeground(Color.RED);  
    division.addActionListener(new MyListener1());  
    equal.setFont(new Font(\"隶书\",Font.PLAIN,20));  
    plus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    minus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    multi.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    division.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    point.addActionListener(new MyListener1());  
    panel1.add(answer);  
    panel1.add(clear);  
    panel2.add(point);  
    panel2.add(equal);  
    panel3.add(plus);  
    panel3.add(minus);  
    panel3.add(multi);  
    panel3.add(division);  
    add(panel1);   
    add(panel2);  
    add(panel3);  
}  
  
 class MyListener1 implements ActionListener{  
    public void actionPerformed(ActionEvent e){  
          
        for(int i=0;i<=9;i++) {  
            if(e.getSource()==b[i]||e.getSource()==point){  
                answer.setText(\"\");  
                if(e.getSource()==point){  
                      
                    s=foreText+\".\";  
                    answer.setText(s);  
                }else{  
                if(s!=\"\"){  
                    answer.setText(s+b[i].getText());  
                    foreText=s+b[i].getText();//此处应当修改，  
                }else{  
                    answer.setText(foreText+b[i].getText());  
                foreText=foreText+b[i].getText();  
                }  
                }  
                }  
        }  
        if(e.getSource()==clear){  
            foreText=\"\";  
            s=\"\";  
            answer.setText(\"\");  
        }  
        if(e.getSource()==plus||e.getSource()==minus||e.getSource()==multi||e.getSource()==division){  
            dFore=Double.parseDouble(foreText);  
            s=\"\";  
            foreText=\"\";  
            answer.setText(\"\");  
            op=e.getSource();  
        }  
        if(e.getSource()==equal){  
            dBack=Double.parseDouble(foreText);  
            foreText=\"\";  
            answer.setText(\"\");  
            if(op==plus){  
                d=dFore+dBack;  
            }  
            if(op==minus){  
                d=dFore-dBack;  
            }  
            if(op==multi){  
                d=dFore*dBack;  
            }  
            if(op==division){  
                d=dFore/dBack;  
            }  
            answer.setText(\"\"+d);  
        }  
    }  
}  
}
" #("
" 0 1 (yank-handler (evil-yank-line-handler))) "import javax.swing.*;  
  
import java.awt.*;  
import java.awt.event.*;  
public class calculate extends JFrame {  
    JButton[] b = new JButton[10];  
    JPanel panel1 = new JPanel(); // 实例化面板  
    JPanel panel2 = new JPanel();   
    JPanel panel3 = new JPanel();  
    JTextField answer=new JTextField(10);  
    JButton clear=new JButton(\"清除\");  
    JButton equal=new JButton(\"=\");  
    JButton point=new JButton(\".\");  
    JButton plus=new JButton(\"+\");  
    JButton minus=new JButton(\"-\");  
    JButton multi=new JButton(\"×\");  
    JButton division=new JButton(\"÷\");  
    String foreText=new String(\"\");  
    String backText=new String(\"\");  
    String s=new String();  
    String s1=new String();  
    Object op=new String();  
    Object o=new String();  
    double d, dFore, dBack;  
    int i=9;  
    public static void main(String[] args) {  
        // TODO Auto-generated method stub  
        JFrame calculator =new calculate();  
        calculator.setVisible(true);  
      
    }  
public calculate(){  
    setTitle(\"计算器\");  
    setSize(300,300);  
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   
    Toolkit kit = Toolkit.getDefaultToolkit();  
    Dimension screenSize = kit.getScreenSize();//获取屏幕分辨率  
    setLocation(screenSize.width/4,screenSize.height/4);//位置  
    for ( i =9; i>=0; i--) {  
        b[i] = new JButton(Integer.toString(i));// 实例化数字按钮   
        b[i].addActionListener(new MyListener1());  
        panel2.add(b[i]); // 增加按钮到面板  
          
    }  
      
    setLayout(new FlowLayout()); // 设置布局管理器   
    panel1.setLayout(new FlowLayout());  
    panel2.setLayout(new GridLayout(4,3,10,8));  
    panel3.setLayout(new GridLayout(4,1,8,12));   
    clear.setFont(new Font(\"隶书\",Font.PLAIN,15));  
    clear.setForeground(Color.RED);  
    clear.addActionListener(new MyListener1());  
    equal.setForeground(Color.RED);  
    equal.addActionListener(new MyListener1());  
    plus.setForeground(Color.RED);  
    plus.addActionListener(new MyListener1());  
    minus.setForeground(Color.RED);  
    minus.addActionListener(new MyListener1());  
    multi.setForeground(Color.RED);  
    multi.addActionListener(new MyListener1());  
    division.setForeground(Color.RED);  
    division.addActionListener(new MyListener1());  
    equal.setFont(new Font(\"隶书\",Font.PLAIN,20));  
    plus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    minus.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    multi.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    division.setFont(new Font(\"隶书\",Font.PLAIN,18));  
    point.addActionListener(new MyListener1());  
    panel1.add(answer);  
    panel1.add(clear);  
    panel2.add(point);  
    panel2.add(equal);  
    panel3.add(plus);  
    panel3.add(minus);  
    panel3.add(multi);  
    panel3.add(division);  
    add(panel1);   
    add(panel2);  
    add(panel3);  
}  
  
 class MyListener1 implements ActionListener{  
    public void actionPerformed(ActionEvent e){  
          
        for(int i=0;i<=9;i++) {  
            if(e.getSource()==b[i]||e.getSource()==point){  
                answer.setText(\"\");  
                if(e.getSource()==point){  
                      
                    s=foreText+\".\";  
                    answer.setText(s);  
                }else{  
                if(s!=\"\"){  
                    answer.setText(s+b[i].getText());  
                    foreText=s+b[i].getText();//此处应当修改，  
                }else{  
                    answer.setText(foreText+b[i].getText());  
                foreText=foreText+b[i].getText();  
                }  
                }  
                }  
        }  
        if(e.getSource()==clear){  
            foreText=\"\";  
            s=\"\";  
            answer.setText(\"\");  
        }  
        if(e.getSource()==plus||e.getSource()==minus||e.getSource()==multi||e.getSource()==division){  
            dFore=Double.parseDouble(foreText);  
            s=\"\";  
            foreText=\"\";  
            answer.setText(\"\");  
            op=e.getSource();  
        }  
        if(e.getSource()==equal){  
            dBack=Double.parseDouble(foreText);  
            foreText=\"\";  
            answer.setText(\"\");  
            if(op==plus){  
                d=dFore+dBack;  
            }  
            if(op==minus){  
                d=dFore-dBack;  
            }  
            if(op==multi){  
                d=dFore*dBack;  
            }  
            if(op==division){  
                d=dFore/dBack;  
            }  
            answer.setText(\"\"+d);  
        }  
    }  
}  
}  " #("}
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler))) #("{
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("namespace __cc__
" 0 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t) 10 11 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-constant-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t)) #("}
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler))) #("namespace __cc__{
" 0 1 (yank-handler (evil-yank-line-handler) fontified t c-is-sws t face font-lock-keyword-face) 1 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 2 3 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 3 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 4 5 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 5 6 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 6 7 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 7 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t) 10 11 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-constant-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start) 17 18 (yank-handler (evil-yank-line-handler) fontified t)) #("using namespace __cc__;
" 0 1 (yank-handler (evil-yank-line-handler) fontified t c-is-sws t face font-lock-keyword-face) 1 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 2 3 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 3 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 4 5 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 5 6 (yank-handler (evil-yank-line-handler) fontified t) 6 7 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 7 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t) 16 17 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 17 18 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 18 19 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 19 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 20 21 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 21 22 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-constant-face) 22 23 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start) 23 24 (yank-handler (evil-yank-line-handler) fontified t)) #("_" 0 1 (face font-lock-constant-face c-type c-decl-id-start fontified t)) #("_" 0 1 (face font-lock-constant-face c-type c-decl-id-start fontified t)) #("}
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler))) #("{
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("ddnamespace __MySTL__
" 0 1 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 1 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 2 3 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 3 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 4 5 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 5 6 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 6 7 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 7 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-type-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 17 18 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 18 19 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 19 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 20 21 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 21 22 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("}
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("{
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("bool clist::operator== (clist & rhs) const
" 0 1 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 1 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 2 3 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 3 4 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (yank-handler (evil-yank-line-handler) fontified t) 5 6 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 6 7 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 7 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t) 11 12 (yank-handler (evil-yank-line-handler) fontified t) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 17 18 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 18 19 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 19 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 20 21 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 21 22 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 22 23 (yank-handler (evil-yank-line-handler) fontified t) 23 24 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-arg-start) 24 25 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 25 26 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 26 27 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 27 28 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 28 29 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 29 30 (yank-handler (evil-yank-line-handler) fontified t) 30 31 (yank-handler (evil-yank-line-handler) fontified t) 31 32 (yank-handler (evil-yank-line-handler) fontified t) 32 33 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 33 34 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 34 35 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 35 36 (yank-handler (evil-yank-line-handler) fontified t) 36 37 (yank-handler (evil-yank-line-handler) fontified t) 37 38 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 38 39 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 39 40 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 40 41 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 41 42 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face c-type c-decl-id-start) 42 43 (yank-handler (evil-yank-line-handler) fontified t)) #("        const dd
" 0 8 (yank-handler (evil-yank-line-handler) fontified t) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("}
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("    *this = rhs;
" 0 4 (yank-handler (evil-yank-line-handler) fontified t) 4 5 (yank-handler (evil-yank-line-handler) fontified t) 5 6 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 6 7 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 7 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t) 10 11 (yank-handler (evil-yank-line-handler) fontified t) 11 12 (yank-handler (evil-yank-line-handler) fontified t) 12 13 (yank-handler (evil-yank-line-handler) fontified t) 13 14 (yank-handler (evil-yank-line-handler) fontified t) 14 15 (yank-handler (evil-yank-line-handler) fontified t) 15 16 (yank-handler (evil-yank-line-handler) fontified t) 16 17 (yank-handler (evil-yank-line-handler) fontified t)) #("    init();
" 0 4 (yank-handler (evil-yank-line-handler) fontified t) 4 5 (yank-handler (evil-yank-line-handler) fontified t) 5 6 (yank-handler (evil-yank-line-handler) fontified t) 6 7 (yank-handler (evil-yank-line-handler) fontified t) 7 8 (yank-handler (evil-yank-line-handler) fontified t) 8 9 (yank-handler (evil-yank-line-handler) fontified t) 9 10 (yank-handler (evil-yank-line-handler) fontified t) 10 11 (yank-handler (evil-yank-line-handler) fontified t) 11 12 (yank-handler (evil-yank-line-handler) fontified t)) #("{
" 0 1 (yank-handler (evil-yank-line-handler) fontified t) 1 2 (yank-handler (evil-yank-line-handler) fontified t)) #("clist::clist(const clist & rhs)
" 0 1 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 1 2 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 2 3 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 3 4 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 4 5 (yank-handler (evil-yank-line-handler) fontified t face font-lock-constant-face) 5 6 (yank-handler (evil-yank-line-handler) fontified t) 6 7 (yank-handler (evil-yank-line-handler) fontified t) 7 8 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t face font-lock-function-name-face) 12 13 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-arg-start) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 17 18 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 18 19 (yank-handler (evil-yank-line-handler) fontified t) 19 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 20 21 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 21 22 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 22 23 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 23 24 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 24 25 (yank-handler (evil-yank-line-handler) fontified t) 25 26 (yank-handler (evil-yank-line-handler) fontified t) 26 27 (yank-handler (evil-yank-line-handler) fontified t) 27 28 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 28 29 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 29 30 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 30 31 (yank-handler (evil-yank-line-handler) fontified t) 31 32 (yank-handler (evil-yank-line-handler) fontified t)) "clist::clist(const clist & rhs)
{
    init();
    *this = rhs;
}
" #("            Node * current;
" 0 12 (yank-handler (evil-yank-line-handler) fontified t) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-type-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t) 17 18 (yank-handler (evil-yank-line-handler) fontified t) 18 19 (yank-handler (evil-yank-line-handler) fontified t) 19 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 20 21 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 21 22 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 22 23 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 23 24 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 24 25 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 25 26 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 26 27 (yank-handler (evil-yank-line-handler) fontified t) 27 28 (yank-handler (evil-yank-line-handler) fontified t)) #("        public:
" 0 8 (yank-handler (evil-yank-line-handler) fontified t) 8 9 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 9 10 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 10 11 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 11 12 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-keyword-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-end) 15 16 (yank-handler (evil-yank-line-handler) fontified t)) #("
            Node" 0 13 (fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face fontified t) 15 16 (face font-lock-type-face fontified t) 16 17 (face font-lock-type-face c-type c-decl-id-start fontified t)) #("t" 0 1 (face font-lock-variable-name-face fontified t)) #("                    current = current->next;
" 0 20 (yank-handler (evil-yank-line-handler) fontified t) 20 21 (yank-handler (evil-yank-line-handler) fontified t) 21 22 (yank-handler (evil-yank-line-handler) fontified t) 22 23 (yank-handler (evil-yank-line-handler) fontified t) 23 24 (yank-handler (evil-yank-line-handler) fontified t) 24 25 (yank-handler (evil-yank-line-handler) fontified t) 25 26 (yank-handler (evil-yank-line-handler) fontified t) 26 27 (yank-handler (evil-yank-line-handler) fontified t) 27 28 (yank-handler (evil-yank-line-handler) fontified t) 28 29 (yank-handler (evil-yank-line-handler) fontified t) 29 30 (yank-handler (evil-yank-line-handler) fontified t) 30 31 (yank-handler (evil-yank-line-handler) fontified t) 31 32 (yank-handler (evil-yank-line-handler) fontified t) 32 33 (yank-handler (evil-yank-line-handler) fontified t) 33 34 (yank-handler (evil-yank-line-handler) fontified t) 34 35 (yank-handler (evil-yank-line-handler) fontified t) 35 36 (yank-handler (evil-yank-line-handler) fontified t) 36 37 (yank-handler (evil-yank-line-handler) fontified t) 37 38 (yank-handler (evil-yank-line-handler) fontified t) 38 39 (yank-handler (evil-yank-line-handler) fontified t) 39 40 (yank-handler (evil-yank-line-handler) fontified t) 40 41 (yank-handler (evil-yank-line-handler) fontified t) 41 42 (yank-handler (evil-yank-line-handler) fontified t) 42 43 (yank-handler (evil-yank-line-handler) fontified t) 43 44 (yank-handler (evil-yank-line-handler) fontified t) 44 45 (yank-handler (evil-yank-line-handler) fontified t)) #("
" 0 1 (yank-handler (evil-yank-line-handler) fontified t)) #("            Node * current;
" 0 12 (yank-handler (evil-yank-line-handler) fontified t) 12 13 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 13 14 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 14 15 (yank-handler (evil-yank-line-handler) fontified t face font-lock-type-face) 15 16 (yank-handler (evil-yank-line-handler) fontified t c-type c-decl-id-start face font-lock-type-face) 16 17 (yank-handler (evil-yank-line-handler) fontified t) 17 18 (yank-handler (evil-yank-line-handler) fontified t) 18 19 (yank-handler (evil-yank-line-handler) fontified t) 19 20 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 20 21 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 21 22 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 22 23 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 23 24 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 24 25 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 25 26 (yank-handler (evil-yank-line-handler) fontified t face font-lock-variable-name-face) 26 27 (yank-handler (evil-yank-line-handler) fontified t) 27 28 (yank-handler (evil-yank-line-handler) fontified t)) #("}" 0 1 (fontified t)) #("        
" 0 8 (fontified t yank-handler (evil-yank-line-handler)) 8 9 (fontified t yank-handler (evil-yank-line-handler))) #("        void rtn_sex()  { return sex; }
" 0 8 (fontified t yank-handler (evil-yank-line-handler)) 8 9 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 9 10 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 10 11 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t yank-handler (evil-yank-line-handler)) 12 13 (fontified t yank-handler (evil-yank-line-handler)) 13 14 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 14 15 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 15 16 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 16 17 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 17 18 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 18 19 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 19 20 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 20 21 (fontified t yank-handler (evil-yank-line-handler)) 21 22 (fontified t yank-handler (evil-yank-line-handler)) 22 23 (fontified t yank-handler (evil-yank-line-handler)) 23 24 (fontified t yank-handler (evil-yank-line-handler)) 24 25 (fontified t yank-handler (evil-yank-line-handler)) 25 26 (fontified t yank-handler (evil-yank-line-handler)) 26 27 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 27 28 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 28 29 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 29 30 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 30 31 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 31 32 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 32 33 (fontified t yank-handler (evil-yank-line-handler)) 33 34 (fontified t yank-handler (evil-yank-line-handler)) 34 35 (fontified t yank-handler (evil-yank-line-handler)) 35 36 (fontified t yank-handler (evil-yank-line-handler)) 36 37 (fontified t yank-handler (evil-yank-line-handler)) 37 38 (fontified t yank-handler (evil-yank-line-handler)) 38 39 (fontified t yank-handler (evil-yank-line-handler)) 39 40 (fontified t yank-handler (evil-yank-line-handler))) #("        void rtn_name() { return name; }
" 0 8 (fontified t yank-handler (evil-yank-line-handler)) 8 9 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 9 10 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 10 11 (face font-lock-type-face fontified t yank-handler (evil-yank-line-handler)) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t yank-handler (evil-yank-line-handler)) 12 13 (fontified t yank-handler (evil-yank-line-handler)) 13 14 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 14 15 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 15 16 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 16 17 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 17 18 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 18 19 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 19 20 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 20 21 (face font-lock-function-name-face fontified t yank-handler (evil-yank-line-handler)) 21 22 (fontified t yank-handler (evil-yank-line-handler)) 22 23 (fontified t yank-handler (evil-yank-line-handler)) 23 24 (fontified t yank-handler (evil-yank-line-handler)) 24 25 (fontified t yank-handler (evil-yank-line-handler)) 25 26 (fontified t yank-handler (evil-yank-line-handler)) 26 27 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 27 28 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 28 29 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 29 30 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 30 31 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 31 32 (face font-lock-keyword-face fontified t yank-handler (evil-yank-line-handler)) 32 33 (fontified t yank-handler (evil-yank-line-handler)) 33 34 (fontified t yank-handler (evil-yank-line-handler)) 34 35 (fontified t yank-handler (evil-yank-line-handler)) 35 36 (fontified t yank-handler (evil-yank-line-handler)) 36 37 (fontified t yank-handler (evil-yank-line-handler)) 37 38 (fontified t yank-handler (evil-yank-line-handler)) 38 39 (fontified t yank-handler (evil-yank-line-handler)) 39 40 (fontified t yank-handler (evil-yank-line-handler)) 40 41 (fontified t yank-handler (evil-yank-line-handler))) "inline bool operator== (User & rhs)
{
    return name == rhs.name && sex == rhs.sex && address == rhs.address &&
}" #("        tel == rhs.tel && age == rhs.age;
" 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t))))
